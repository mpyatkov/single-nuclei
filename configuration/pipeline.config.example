params {
    //SCC project identifier
    scc_project = 'wax-dk'

    // output directory with results
    output_dir='output'

    // set of options describing parameters required for STAR indexes
    preprocessing {

	// GTF Files:
	// exonic_mm10 -- to count only exonic reads
	// genebody_mm10 -- to count pre-mRNA single nuclei RNA-seq samples (exons and introns)
	// intronic-with-mono_mm10 -- to count intronic reads for multiexonic genes + reads from monoexonic genes
	// intronic-without-mono_mm10 -- to count ONLY intronic reads for only multiexonic genes

	indexes='exonic_mm10,intronic-without-mono_mm10,genebody_mm10,intronic-with-mono_mm10'

	main_db_path = '/projectnb/wax-es/routines'

	// Genomes of organisms in fasta format
	fasta_dir = "${params.preprocessing.main_db_path}/FASTA"
	
	// GTF files for each separate organism
	gtfs_dir = "${params.preprocessing.main_db_path}/SC_GTFS"

	// Directory with builded indexes inside
	indexes_output_dir = "${params.preprocessing.main_db_path}/SC_INDEXES"
    }

    // TODO: description of the module
    
    module1 {
	// Module1: preliminary analysis of all samples separately
 	
	// sample configuration file contains information about tech.,
	// bio.replicates and batches
	samples_general='configuration/samples.csv'

	// sample options - user defined option per sample
	sample_options='configuration/samples_userdefined.csv'
    }

    // TODO: description of the module
    
    module2 {

	// Directory for temporary configuration files which used in the pipeline

	// NOTE: "temporary_configs" ARE GIVEN AS AN EXAMPLE AND
	// CHANGING THEM DOES NOT AFFECT THE OPERATION OF THE PIPELINE.
	
	temporary_configs = "${params.output_dir}/module_2_outputs/temporary_configs/"
	
	// default GTF file for single nuclei processing, only 2 options
	// 'with-mono' - intronic + monoexonic
	// 'genebody' - all exon + introns
	// but for experiments user can pick 1 of 4:
	// downstream_gtf= exonic OR without-mono OR genebody OR with-mono
	
	// this option sets the file from which all barcodes will be used 

	// Example: if we set 'with-mono', all cell barcodes from
	// 'SAMPLEID_with-mono-molecule_info.h5' will be presented in the
	// modified 'molecule_info.h5' file. Other h5 files (genebody,
	// without-mono, exonic) will be optional and may add some cell
	// barcodes that are not presented in molecule_info.h5 file
	// 'with-mono'.
	
	// this options also means which molecule_info.h5 
	// "with-mono" means that we will modify intronic-with-monoexonic
	// molecule_info.h5 files (other option should be "genebody")
		
	// downstream_umi can be 'genebody', 'with-mono' or custom full path
	// First and second will aggregate new matrix based on data in module 1
	// the former is full path to previously calculated aggregation matrix 

	// aggregation_config - configuration file with all information
	// about which molecule_info.h5 files should be aggregated
	// Options:
	// 1. 'auto' - means collect molecule_info.h5 files for "genebody"
	//          and "intronic-mono-exonic" features separately in two
	//          aggregation.csv files. Create for each two separate UMI matrices.
	// 2. custom path to configuration aggregation.csv file
	
	aggregation_config = 'auto'
	
	// ----------
	// downstream_umi = '/projectnb2/wax-dk/max/SCexp/G190_FULL/output/module_2_outputs/aggregation.pop2/with-mono/filtered_feature_bc_matrix.h5'
	downstream_umi = 'genebody'
	// users_cellbarcodes = '/projectnb2/wax-dk/max/SCexp/G190_FULL/output/module_2_outputs/aggr-user-defined-barcodes.csv'
	
	// downstream_umi = '/projectnb2/wax-dk/max/SCexp/G190_FULL/output/module_2_outputs/aggregation/genebody/filtered_feature_bc_matrix.h5'
	// users_cellbarcodes = '/projectnb2/wax-dk/max/SCexp/G190_FULL/output/module_2_outputs/aggr-user-defined-barcodes.csv'
	// downstream_umi = "with-mono"
	users_cellbarcodes = "with-mono"
	// ----------
	
	// By default pipeline will recalculate cellbarcodes by
        // collecting all user-defined cellbarcodes for each separate sample from
	// module1 directories to file: "../output/module_2_outputs/aggr-user-defined-barcodes.csv"
        // In case when we would like to use own, manually prepared
        // cellbarcodes file we need to set the following option to "false" and replace this ^^^ file.
        // recalculate_cellbarcodes = true
	
	// gene names for dotplot, header = title on dotplot, each column separate plot
    	dotplot_gene_list = 'configuration/dotplot_gene_list.csv'

	// Shows which UMAP locations are occupied by a specific gene from the following list.
	featureplot_gene_list = 'configuration/featureplot_gene_list.csv'

	// Cluster labels for UMAP cluster (by default = 0,1,2,3,...)
	seurat_cluster_labels = 'configuration/seurat_cluster_labels.csv'

	// Show labels for UMAP plots
	labels_for_umap = "Y"

	// Default number of clusters on UMAP plot (should be quoted)
	seurat_nclusters = "8"
	umap_min_dist="0.001"
        umap_npcs="8"
        umap_kparam="20"
        umap_resolution="auto"
	//umap_resolution="0.125"

	// MT percent (additional adjustments for MT percent. To get
	// the effect, this parameter must be less than the mt_percent
	// parameter in the samples_userdefined.csv configuration file)
	mt_percent = 10.0
	
	// use cells, the lower border of which is equal to the
	// following parameters
	// number of genes detected in each cell
	min_genes = 400
	// number of molecules detected within each cell
	min_counts = 400
    }
}
